package com.dc.appengine.appmaster.service;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSONObject;
import com.dc.appengine.appmaster.entity.Application;
import com.dc.appengine.appmaster.entity.BluePrint;
import com.dc.appengine.appmaster.entity.BluePrintType;
import com.dc.appengine.appmaster.entity.Page;

public interface IBlueprintService {
	public int saveAllBlueprint(Map<String,String> param);
	public String getAllBlueprint(String blueprint_name);
	public int updateAllBlueprint(Map<String, String> param);
	public int saveBluePrintType(BluePrintType bluePrintType);
	public String generateStartFlow(BluePrint bp) throws Throwable;
	public int getBlueprint_id(String blueprint_name);
	public void delBluePrintType(String blueprint_id);
	public void generateDeployFlow(BluePrint bp,String blueprint_id) throws Throwable;
	public void generateDestroyFlow(BluePrint bp,String blueprint_id) throws Throwable;
	public String generateStopFlow(BluePrint bp,String blueprint_id) throws Throwable;
	public Map<String, Object> startBlueprintInstance(String instanceId);
	public Map<String, Object> generateDployInstance(String blueprint_instance_name);
	public Map<String, Object> stopBlueprintInstance(String instanceId);
	public Map<String, Object> destroyBlueprintInstance(String instanceId);
	public String getSubFlowInfo(long flowId);
	public Map<String,Object> getBlueprintTypeByFlowId(long flowId);	
	Page listBlueprints(Map<String,Object> condition,int pageNum,int pageSize);
	Page listBlueprintInstances(Map<String,Object> condition,int pageNum,int pageSize);
	void updateBlueprintInstance(Map<String,Object> info);
	public int getBlueprintInstanceNum(String blueprint_id);
	public long getEmptyFlowId();
	/*public void startBlueprintInstanceOne(int instanceId, long appId);
	public void stopBlueprintInstanceOne(int instanceId, long appId);*/
	public Map<String,Object> opBlueprintInstanceOne(long appId,String op);
	public Map<String,Object> testDeployOne(List<Map<String,Object>> instances,Application app);
	public int saveBlueprintTemplate(Map<String, String> param);
	public int saveBlueprintInstance(Map<String, String> param) throws Exception;
	public String getBluePrintTree(Integer blueprintInstanceId, String flowId, String op);
	public void delBlueprintTemplate(String blueprint_id);
	public void delBlueInstance(int blueprintInstanceId);
	public String operateFlow(long appId, String resVersionId, String op);
	public String operateFlowDeploy(long appId, String versionId,
			String instanceId, String nodeId);
	public long getEmptyFlow();
	public Map<String, Object> generateSpecificBPFlows(BluePrint bp) throws Exception;
	public String getFlowInfo(String flowId);
	public String cdflowToSmartflow(String flow);
	public void saveBluePrintFlows(Map<String,Object> flows,String bluePrintInsId);
	public List<Map<String,Object>> listAllBlueprintInstances(Map<String, Object> condition);
	public String logRecord(String logJson);
	Map<String,Object> getBlueprintType(String flowId);
	public String getNodesLogRecord(String tokenId);
	public String prepareSubFlowMessage(Map subFlowInfo) throws Exception;
	public String prepareSubFlowMessageTest(Map subFlowInfo) throws Exception;
	public String addBlueprintFlow(String blueprintInstanceId, String flowType, String flowInfo);
	public String listBpInstanceFlows(String blueprintInstanceId);
	public String executeBlueprintFlow(String flowId, String blueprintInstanceId, Map<String, String> params);
	public String updateBlueprintFlow(String flowInfo, String flowId);
	public String getFlowNodeState(String nodes,String flowId);
	public List<String> getBlueprints();
	public boolean checkBlueprintFlowUnique(String bpInstanceId, String type);
	public Map<String,Object> getBlueprintTemplate(String bpName);
	public List<Map<String, Object>> getFlowsByBlueInstanceId(String blueprintInstanceId);
	public List<Application> getBlueprintComponents(String blueprintId);
	public Map<String,Object> getBlueprintComponentConfig(String blueprintId, String componentId, String version,
			String resourceVersionId);
	public int updateBlueprintComponentConfig(Map<String, Object> param);
	public int updateBpInsKeyConfig(Map<String, Object> param);
	public Map<String, String> computeBlueprintValues(String blueprintId);
	public Map<String, Object> getBlueprintResourcePoolIns(String message) throws Exception;
	public String getBlueprintResourcePoolConfigs(String blueprintId);
	public void updateBlueprintResourcePoolConfigs(Map<String, String> map) throws Exception;
	public void uploadComponentFile(String blueprintId, int componentId, String currentVersion, String targetVersion);
	public String listFlowInstanceIds(int pageSize,int pageNum,String id,String flowId,String sortName,String sortOrder,String instanceId,String flag);
	public String getBrotherBlueprintInstance(String blueprintId,String bluePrintInsId);
	public String getBlueprintInstanceKV(String bluePrintInsId);
	public String existRunningInstance(String cdFlowId,String blueprintInstanceId);
	public int checkSnapshotNameOfBlueprintInstance(String blueInstanceId, String snapShotName, int userId);
	public int saveSnapshotOfBlueprintInstance(String blueInstanceId, String snapShotName, int userId);
	public List<Map<String, String>> listSnapshotOfBlueprintInstance(String blueInstanceId, int userId,String sortName,String sortOrder);
	public String getSnapshotInfoByBlueprintInstance(String blueInstanceId, String snapShotName);
	public int deleteSnapshotByBlueprintInstanceId(String blueInstanceId);
	public int deleteSnapshotByBlueprintInstance(String blueInstanceId, String snapshotName);
	public void deleteResourcePoolLabelByBlueprintInstanceId(int blueprintInstanceId);
	public String getRcResourcePoolConfigByBlueprintInstance(String blueInstanceId, int userId);
	public Map<String, Object> getBlueprintInstanceById(int blueprintId);
	Map<String, Object> getBlueprintTemplateByInsId(String blueprintId);
	public String getFlowInstanceIds(String id, String flowName);
	public String getFlowInstanceIds(int pageSize, int pageNum,String bluePrintInsId, String flowName, String appName,String sortName, String sortOrder);
	public List<Map<String, Object>> getSecondFlowsInstanceList(String blueprintInstanceId, String appName);
	public String saveInstanceId(String bpInstanceId,String instanceId,String flowName);
	public String getRcResourcePoolByBlueprintInstance(String blueInstanceId, int userId) throws Exception;
	public String prepareNewSubFlowMessage(Map subFlowInfo) throws Exception;
	public void updateBlueprintReducePoolConfig(String instanceId);
	public Map<String, Map<String, String>> getPluginConfigByBlueprintFlow(String blueprintFlowId, String pluginKey);
	Map<String, Object> getBlueprintInstance(String blueprintInsId);
	public List<Map<String, Object>> listBlueprintByNameAndTemplateAndApp(Map<String, Object> params);
	public int getbluePrintInstanceId(String blueprint_id, String blueprint_instance_name);
	public void updateBlueprintResourcePoolConfigs4COP(Map<String, String> map) throws Exception;
	public void cloneBlueprintInstanceConfig(String resourceInstanceId, String targetInstanceId) throws Exception;
	public List getFlowInstanceIds(JSONObject params);
	
	public List getFlowInstanceIdsByMap(Map<String,Object> params);
	public List getFlowInstanceIds(Map<String,Object> params);
	public List findBlueInstanceIds(Map<String,Object> params);
}